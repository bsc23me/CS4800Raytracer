// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Output RenderTexture
RWTexture2D<float4> Result;

#define MAX_BOUNCES 3
#define TILE_SIZE 8
#define PI 3.14159265

// Define how large the tiles are
#define CHECKERBOARD_SCALE 0.5

// Camera projection matricies
float4x4 CameraToWorldMat;
float4x4 InversePerspectiveProjMat;

// Scene variables
bool sunLight;
float4 Sun;

// Shader variables
int SAMPLES;
uint randomState = 2;
bool fastMath;
bool useBB;

uint meshCount;


////////////////////////////////////////////////////////////////////////
// Random Functions
////////////////////////////////////////////////////////////////////////


// PCG (permuted congruential generator)
// Thanks to: www.youtube.com/@SebastianLague
// www.pcg-random.org and www.shadertoy.com/view/XlGcRh
float random(inout uint seed){
	seed = seed * 747796405 + 2891336453;
	uint result = ((seed >> ((seed >> 28) + 4)) ^ seed) * 277803737;
	result = (result >> 22) ^ result;
	return result / 4294967295.0;
}

// seeded random which does not modify the input
float randomf(uint seed){
	seed = seed * 747796405 + 2891336453;
	uint result = ((seed >> ((seed >> 28) + 4)) ^ seed) * 277803737;
	result = (result >> 22) ^ result;
	return result / 4294967295.0;
}

// returns a random value which is normally distributed (non-uniform)
float randomNormal(inout uint seed){
	float theta = 2 * PI * random(seed);
	float rho = sqrt(-2 * log(random(seed)));
	return rho * cos(theta);
}

// returns a random unit vector which is in the same hemisphere as a given normal
float3 randomDirection(inout uint seed, float3 normal){
	float x = randomNormal(seed);
	float y = randomNormal(seed);
	float z = randomNormal(seed);
	float3 v = normalize(float3(x,y,z));
	float dotp = dot(v,normal);
	return v * sign(dotp);
}

////////////////////////////////////////////////////////////////////////
// Structures
////////////////////////////////////////////////////////////////////////

// Contains all of the information about a given ray hit
struct HitInfo
{
	float3 hitPoint; // the location where the hit occured
	float3 normal; // the normal of the surface at the hit point
	float distance; // the distance the given hit is from the camera
	float3 albedo; // the albedo of the material at the hit point
	float smoothness; // the smoothness of the material at the hit point
	float metallic; // the metallic of the material at the hit point
	float3 emission; // the emission of the material at the hit point
	float emissionStrength; // the emission strength of the material at the hit point
};

// Contains information about a given ray
struct Ray
{
	float3 origin; // the starting location from which the ray originated
	float3 direction; // the direction the ray is travelling
};

// DEPRECATED | Contains information about a given sphere
struct Sphere
{
	float3 center;
	float radius;
};

// Contains information about a given plane
struct Plane
{
	float3 position;
	float3 normal;
};

// DEPRECATED | Contains information about a given triangle
struct Triangle{
	int3 points; // 3 integer indices which correspond to float3 points in the vertices buffer
	int3 uv; // 3 integer indices which correspond to float2 points in the UVs buffer
};

// Contains a mesh's buffer offsets
// Each offset tells where in the respective buffer this mesh starts
struct MeshIndices{
	uint vertOffset;
	uint normalOffset;
	uint uvOffset;
	uint faceOffset;
	int material;
};

// Contains information about the given bounds of a bounding box
struct BoundingBox{
	float3 lowerBound;
	float3 upperBound;
};

// Data Buffers
StructuredBuffer<float3> Vertices;
StructuredBuffer<float3> VNormals;
StructuredBuffer<float2> UVs;
StructuredBuffer<uint3> Meshes;
StructuredBuffer<BoundingBox> BoundingBoxes;
Texture3D<float4> Materials;
StructuredBuffer<MeshIndices> MeshIndex;

////////////////////////////////////////////////////////////////////////
// Structure Factories
////////////////////////////////////////////////////////////////////////

// Ray Init
Ray CreateRay(float3 origin, float3 direction){
	Ray ray;
	ray.origin = origin;
	ray.direction = direction;
	return ray;
}

// Ray Init projecting a uv coord into world space using perspective projection
Ray CreateCameraRay(float2 uv){
	float3 origin = mul(CameraToWorldMat, float4(0.0, 0.0, 0.0, 1.0)).xyz;
	float3 direction = mul(InversePerspectiveProjMat, float4(uv, 0.0, 1.0)).xyz;
	direction = mul(CameraToWorldMat, float4(direction,0.0)).xyz;
	direction = normalize(direction);
	return CreateRay(origin, direction);
}

// HitInfo Init
HitInfo CreateRayHit(){
    HitInfo hit;
    hit.hitPoint = float3(0.0, 0.0, 0.0);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0, 0.0, 0.0);
    hit.albedo = float3(0.0, 0.0, 0.0);
    hit.emission = float3(0.0, 0.0, 0.0);
	hit.emissionStrength = 0;
	hit.metallic = 0.0;
	hit.smoothness = 0.0;
    return hit;
}

// Plane Init
Plane CreatePlane(float3 position, float3 normal){
	Plane plane;
	plane.position = position;
	plane.normal = normal;
	return plane;
}

////////////////////////////////////////////////////////////////////////
// Triangle Helper Functions
////////////////////////////////////////////////////////////////////////

// Computes the area of a triangle using Heron's formula
float TriangleArea(float3 ptA, float3 ptB, float3 ptC){
	float a = length(ptA - ptB);
	float b = length(ptA - ptC);
	float c = length(ptB - ptC);
	float s = (a + b + c) / 2;
	float area = sqrt(s*(s - a)*(s - b)*(s - c));
	return area;
}

// DEPRECATED | Computes area given a triangle struct
float TriangleArea(Triangle tri){
	return TriangleArea(Vertices[tri.points.x], Vertices[tri.points.y], Vertices[tri.points.z]);
}

// Computes the square of the area of a triangle
// Postpones the squareroot to improve performance
float TriangleSquareArea(float3 x, float3 y, float3 z){
	float a = (x.x - y.x) * (x.x - y.x) + (x.y - y.y) * (x.y - y.y) + (x.z - y.z) * (x.z - y.z);
	float b = (x.x - z.x) * (x.x - z.x) + (x.y - z.y) * (x.y - z.y) + (x.z - z.z) * (x.z - z.z);
	float c = (z.x - y.x) * (z.x - y.x) + (z.y - y.y) * (z.y - y.y) + (z.z - y.z) * (z.z - y.z);
	float areaA2 = -a*a - b*b - c*c + 2*a*b + 2*a*c + 2*b*c;
	return areaA2 / 2;
}

// Converts a given Cartesian point to the provided triangle specific Barycenteric coordinates
float3 CartToBary(uint3 tri, float3 cart){
	float3 x = Vertices[tri.x];
	float3 y = Vertices[tri.y];
	float3 z = Vertices[tri.z];
	float abc = TriangleArea(x,y,z);
	float alpha = TriangleArea(y, z, cart) / abc;
	float beta = TriangleArea(x, z, cart) / abc;
	float gamma = TriangleArea(x, y, cart) / abc;
	return float3(alpha,beta,gamma);
}

// Uses the Postponed squareroot to improve performance
float3 FastBary(float3 tri, float3 cart){
	float3 x = Vertices[tri.x];
	float3 y = Vertices[tri.y];
	float3 z = Vertices[tri.z];
	float triArea2 = TriangleSquareArea(x,y,z);
	float alpha = sqrt(TriangleSquareArea(y,z,cart) / triArea2);
	float beta = sqrt(TriangleSquareArea(x,z,cart) / triArea2);
	float gamma = sqrt(TriangleSquareArea(x,y,cart) / triArea2);
	return float3(alpha,beta,gamma);
}

// Converts a Barycenteric point to a UV coordinate
float2 BaryToUV(uint3 tri, float3 bary){
	float2x3 a = float2x3(UVs[tri.x], UVs[tri.y], UVs[tri.z]);
	return mul(a,bary);
}

////////////////////////////////////////////////////////////////////////
// Collision Detection Functions
////////////////////////////////////////////////////////////////////////

// Update the hit material data with the object's material info
// Normal maps are not implemented for now
void updateHitMaterial(inout HitInfo hit, int material, float2 uv){
	int width, height, depth;
	Materials.GetDimensions(width,height,depth);
	// if invalid material
	if(material < 0 || material >= depth){
		hit.albedo = 1;
		hit.metallic = 0;
		hit.smoothness = 0.2;
		hit.emissionStrength = 0;
		hit.emission = 0;
	}else{
		hit.albedo = Materials[float3(uv,3*material+0)].xyz;
		hit.metallic = Materials[float3(uv,3*material+2)].x;
		hit.smoothness = Materials[float3(uv,3*material+2)].y;
		hit.emissionStrength = Materials[float3(uv,3*material+2)].z;
		hit.emission = 0;
	}
}

// Renders a basic Skybox
float3 SkyboxIntersect(Ray ray){

	// looking above horizon
	float y = ray.direction.y; // V sky is gradient from dark to light | V ground is mid gray
	float3 sky = y > 0 ? float3(0.4*(1-y)*(1-y), 0.8*(1-y)*(1-y), 1.0) : 0.4;

	float sun = pow(max(0, dot(ray.direction,-Sun.xyz)), 32);
	return lerp(sky, 1, sun);
}

// Checks if a ray intersects a box
// Primarily used for bounding box checks
bool BoxIntersect(Ray ray, float3 lb, float3 ub){
	float tmin = -1.#INF;
	float tmax = 1.#INF;

	if(ray.direction.x != 0){
		float tx1 = (lb.x - ray.origin.x)/ray.direction.x;
		float tx2 = (ub.x - ray.origin.x)/ray.direction.x;

		tmin = max(tmin,min(tx1,tx2));
		tmax = min(tmax,max(tx1,tx2));
	}
	if(ray.direction.y != 0){
		float ty1 = (lb.y - ray.origin.y)/ray.direction.y;
		float ty2 = (ub.y - ray.origin.y)/ray.direction.y;

		tmin = max(tmin,min(ty1,ty2));
		tmax = min(tmax,max(ty1,ty2));
	}
	if(ray.direction.z != 0){
		float tz1 = (lb.z - ray.origin.z)/ray.direction.z;
		float tz2 = (ub.z - ray.origin.z)/ray.direction.z;

		tmin = max(tmin,min(tz1,tz2));
		tmax = min(tmax,max(tz1,tz2));
	}
	return tmax >= tmin;
}

//Determines whether a plane was hit using an arbitrary point on the plane
//((P + td) - Q) * N = 0
void PlaneIntersect(Ray ray, Plane plane, inout HitInfo hit){
	float3 v = plane.position - ray.origin; // stored surface point commutation X = ((P + td) - Q) => ((P - Q) + td) => v + td
	float d = dot(ray.direction, plane.normal); // N * d 
	if(d < 0){ // d != 0 => prevent division by 0; d < 0 => backface culling
		float t = dot(v, plane.normal) / d;
		if(t > 0 && t < hit.distance){ 
			// update all the hit information with the planes data
			hit.hitPoint = ray.origin + t * ray.direction;
			hit.normal = plane.normal;
			hit.distance = t;
			//updateHitMaterial(hit, plane.material, 0);
			hit.albedo = int(bool(floor(CHECKERBOARD_SCALE * hit.hitPoint.x) % 2) ^ bool(floor(CHECKERBOARD_SCALE * hit.hitPoint.z) % 2));
		}
	}
}

// Computes the intersection of a ray and a triangle
// Returns true if the ray intersected a triangle
bool TriangleIntersect(Ray ray, uint3 tri, MeshIndices indices, int material, inout HitInfo hit){
	uint w, h, z;
	Materials.GetDimensions(w,h,z);

	// Triangle information
	uint3 vidx = indices.vertOffset + tri;
	float3x3 verts = float3x3(Vertices[vidx.x], Vertices[vidx.y], Vertices[vidx.z]);
	float3 normal = normalize(cross(verts[1]-verts[0], verts[2]-verts[0]));

	// Intersection information
	float d = dot(ray.direction, normal);
	float3 v = verts[0] - ray.origin;

	// Mesh normal information (phong interpolation)
	float3 nidx = indices.normalOffset + tri;
	float3x3 vnormals = float3x3(VNormals[nidx.x], VNormals[nidx.y], VNormals[nidx.z]);

	if(d < 0){ // d < 0 yields backface culling
		// Plane intersection check
		float t = dot(v, normal) / d;
		float3 p = ray.origin + t * ray.direction;
		if(t > 0 && t < hit.distance){
			float3 bary = CartToBary(vidx, p);
			// barycentric total == 1 ? point in triangle
			if(abs(bary.x + bary.y + bary.z - 1) < 0.005){ // 0.005 epsilon
				// Updating Hit Information
				hit.hitPoint = p;
				hit.normal = normalize(mul(transpose(vnormals),bary));
				hit.distance = t;
				// Texture Information
				float2 uv = BaryToUV(tri+indices.uvOffset,bary);
				int2 texSpace = int2(uv.x * w, uv.y * h);
				// Material Information
				updateHitMaterial(hit, material, texSpace);
				return true;
			}
		}
	}
	return false;
}

// Determines whether a sphere was hit by defining a point on the sphere
// X which is a distance r away from the center is also equal to the ray point (ray.origin + ray.direction * t)
// ((P + td) - Q) * ((P + td) - Q)) = r^2
void SphereIntersect(Ray ray, Sphere sphere, inout HitInfo hit){
	float3 v = ray.origin - sphere.center; // stored surface point commutation X = ((P + td) - Q) => ((P - Q) + td) => v + td
	float a = dot(ray.direction, ray.direction); // quadratic term
	if(a == 0) // prevent division by 0
		return;
	float b = 2.0 * dot(ray.direction,v); // linear term
	float c = dot(v,v) - sphere.radius * sphere.radius; // constant term
	float t1 = (-b - sqrt(b*b-4*a*c)) / 2*a; // solve for parameter t using the quadratic formula
	if(t1 > 0 && t1 < hit.distance){ // compare the sphere intersection to the rays current closest hit => closer ? update : keep
		// update all the hit information with the spheres data
		hit.hitPoint = ray.origin + t1 * ray.direction;
		hit.normal = normalize(hit.hitPoint - sphere.center);
		hit.distance = t1;
		//hit.smoothness = sphere.material.smoothness;
		//updateHitMaterial(hit, sphere.material, 0);
	}
}

//////////////////////////////////////////////////////////////////////////
// General Helper Functions
//////////////////////////////////////////////////////////////////////////

// Reflects a ray off of a surface 
bool Bounce(inout Ray ray, HitInfo hit, inout uint seed){
	if(hit.distance < 1.#INF){
		ray.origin = hit.hitPoint + hit.normal * 0.001;

		// Direction determined by surface material properties
		float3 diffuseRay = normalize(hit.normal + randomDirection(seed, hit.normal));
		float3 specularRay = reflect(ray.direction, hit.normal);
		ray.direction = lerp(diffuseRay, specularRay, hit.smoothness);

		return true;
	}
	else{
		return false;
	}
}

// Checks all collisions for a given ray in a scene and
// Returns the HitInfo for the closest intersection to the camera
HitInfo RayCollision(Ray ray){
	HitInfo hit = CreateRayHit();
	PlaneIntersect(ray, CreatePlane(0,float3(0.0, 1.0, 0.0)), hit); // Ground plane hit

	// Loop over each mesh
	for(uint i = 1; i < meshCount; i++){
		// Check bounding boxes if they're in use
		if(!useBB || BoxIntersect(ray,BoundingBoxes[i-1].lowerBound,BoundingBoxes[i-1].upperBound)){
			// Loop over every triangle in the mesh
			for(uint j = MeshIndex[i-1].faceOffset; j < MeshIndex[i].faceOffset; j++){
				TriangleIntersect(ray,Meshes[j],MeshIndex[i-1],i-1,hit);
			}
		}
	}
	return hit;
}

///////////////////////////////////////////////////////////
// Main Computations
///////////////////////////////////////////////////////////

// Fires a given ray and returns color based on the combined hits
// associated with the intersections in the scene
float3 FireRay(Ray ray, inout uint seed){
	float3 color = 0;
	float3 energy = 1;

	for(int i = 0; i < MAX_BOUNCES; i++){
		HitInfo hit = RayCollision(ray);

		if(hit.distance < 1.#INF){
			float3 diffuse = hit.albedo;

			Ray shadowRay = CreateRay(hit.hitPoint + hit.normal * 0.001, -1*Sun.xyz); // fire ray toward light source
			HitInfo shadowHit = RayCollision(shadowRay); // check shadow ray collisions
			if(shadowHit.distance < 1.#INF) // if the light is blocked
				diffuse *= 0.05; // the point is in shadow
			else
				diffuse *= max(0.05,saturate(dot(-1*Sun.xyz, hit.normal))) * Sun.w; // shading handled by Lampertian cosine

			// strength of the fresnel is determined by the smoothness of the material
			float s = pow(8192, saturate(1-hit.smoothness));
			// fresnel is computed based on the angle between the camera ray and the surface normal
			float fresnel = pow(clamp(1-saturate(dot(-ray.direction, hit.normal)), 0, 0.999), s);

			// determine what color the specular highlights should be based on the surface material's metallic
			float3 spec = lerp(1,diffuse,hit.metallic);
			// use the diffuse color or the specular color based on the fresnel
			energy *= lerp(diffuse,spec,fresnel);

		}else
			color += energy * SkyboxIntersect(ray) * 5;

		// if we are out of energy stop bouncing
		if(!any(energy))
			break;

		// if we did not hit a surface stop bouncing
		if(!Bounce(ray, hit, seed))
			break;
	}

	return color;
}

// Main compute shader function
[numthreads(TILE_SIZE,TILE_SIZE,2)]
void CSMain (uint3 id : SV_DispatchThreadID){
	// pixel space transformed to uv space
	uint width, height;
	Result.GetDimensions(width,height);
	uint index = (id.x + id.y * width);
	float2 uv = float2((id.xy) / float2(width,height) * 2.0 - 1.0);

	uint rngState = index;

	Ray camRay = CreateCameraRay(uv);

	float3 color;
	// samples determine how many checks are performed for each pixel on the screen
	int samples = 18;
	for(int i = 0; i < samples; i++)
		color += FireRay(camRay,rngState);
	color /= samples;

    Result[id.xy] = float4(color, 1);
}
